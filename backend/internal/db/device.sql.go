// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: device.sql

package db

import (
	"context"
)

const getDevices = `-- name: GetDevices :many
SELECT id, name, status FROM devices
`

func (q *Queries) GetDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(&i.ID, &i.Name, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDevice = `-- name: InsertDevice :one
INSERT INTO devices (name, status) VALUES ($1, $2) RETURNING id, name, status
`

type InsertDeviceParams struct {
	Name   string `json:"name"`
	Status string `json:"status"`
}

func (q *Queries) InsertDevice(ctx context.Context, arg InsertDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, insertDevice, arg.Name, arg.Status)
	var i Device
	err := row.Scan(&i.ID, &i.Name, &i.Status)
	return i, err
}
