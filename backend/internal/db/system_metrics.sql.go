// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: system_metrics.sql

package db

import (
	"context"
	"database/sql"
)

const getRecentMetrics = `-- name: GetRecentMetrics :many
SELECT timestamp, cpu_usage, memory_used, memory_total, load_avg, disk_used, disk_total
FROM system_metrics
ORDER BY timestamp DESC
LIMIT $1
`

type GetRecentMetricsRow struct {
	Timestamp   sql.NullTime `json:"timestamp"`
	CpuUsage    float64      `json:"cpu_usage"`
	MemoryUsed  int64        `json:"memory_used"`
	MemoryTotal int64        `json:"memory_total"`
	LoadAvg     float64      `json:"load_avg"`
	DiskUsed    int64        `json:"disk_used"`
	DiskTotal   int64        `json:"disk_total"`
}

func (q *Queries) GetRecentMetrics(ctx context.Context, limit int32) ([]GetRecentMetricsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentMetrics, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentMetricsRow
	for rows.Next() {
		var i GetRecentMetricsRow
		if err := rows.Scan(
			&i.Timestamp,
			&i.CpuUsage,
			&i.MemoryUsed,
			&i.MemoryTotal,
			&i.LoadAvg,
			&i.DiskUsed,
			&i.DiskTotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSystemMetrics = `-- name: InsertSystemMetrics :exec
INSERT INTO system_metrics (cpu_usage, memory_used, memory_total, load_avg, disk_used, disk_total)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertSystemMetricsParams struct {
	CpuUsage    float64 `json:"cpu_usage"`
	MemoryUsed  int64   `json:"memory_used"`
	MemoryTotal int64   `json:"memory_total"`
	LoadAvg     float64 `json:"load_avg"`
	DiskUsed    int64   `json:"disk_used"`
	DiskTotal   int64   `json:"disk_total"`
}

func (q *Queries) InsertSystemMetrics(ctx context.Context, arg InsertSystemMetricsParams) error {
	_, err := q.db.ExecContext(ctx, insertSystemMetrics,
		arg.CpuUsage,
		arg.MemoryUsed,
		arg.MemoryTotal,
		arg.LoadAvg,
		arg.DiskUsed,
		arg.DiskTotal,
	)
	return err
}
